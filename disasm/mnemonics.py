#Instruction Prefixes

OP_SIZE     = 0x66
ADDR_SIZE   = 0x67
SEG_CS      = 0x2E
SEG_DS      = 0x3E
SEG_ES      = 0x26
SEG_SS      = 0x36
SEG_FS      = 0x64
SEG_GS      = 0x65
REP_REPE    = 0xF3
REPNE       = 0xF2
LOCK        = 0xF0

sgmnt_ovrd = [SEG_CS, SEG_DS, SEG_ES, SEG_SS, SEG_FS, SEG_GS]
sgmnt_name = ['cs', 'ds', 'es', 'ss', 'fs', 'gs']

sgmnt = dict(zip(sgmnt_ovrd, sgmnt_name))

pfx = [OP_SIZE, ADDR_SIZE, *sgmnt_ovrd, REP_REPE, LOCK]

#Opcodes

#1 byte

ADD_rm8_r8                  = 0x00
ADD_rm1632_r1632            = 0x01
ADD_r8_rm8                  = 0x02 
ADD_r1632_rm1632            = 0x03 
ADD_al_imm8                 = 0x04
ADD_eax_imm1632             = 0x05
PUSH_es                     = 0x06
POP_es                      = 0x07
OR_rm8_r8                   = 0x08
OR_rm1632_r1632             = 0x09
OR_r8_rm8                   = 0x0A
OR_r1632_rm1632             = 0x0B
OR_al_imm8                  = 0x0C
OR_eax_imm1632              = 0x0D
PUSH_cs                     = 0x0E
EXTENDED                    = 0x0F
ADC_rm8_r8                  = 0x10
ADC_rm1632_r1632            = 0x11
ADC_r8_rm8                  = 0x12
ADC_r1632_rm1632            = 0x13
ADC_al_imm8                 = 0x14
ADC_eax_imm1632             = 0x15
PUSH_ss                     = 0x16
POP_ss                      = 0x17
SBB_rm8_r8                  = 0x18
SBB_rm1632_r1632            = 0x19
SBB_r8_rm8                  = 0x1A
SBB_r1632_rm1632            = 0x1B
SBB_al_imm8                 = 0x1C
SBB_eax_imm1632             = 0x1D
PUSH_ds                     = 0x1E
POP_ds                      = 0x1F
AND_rm8_r8                  = 0x20
AND_rm1632_r1632            = 0x21
AND_r8_rm8                  = 0x22
AND_r1632_rm1632            = 0x23
AND_al_imm8                 = 0x24
AND_eax_imm1632             = 0x25
DAA                         = 0x27
SUB_rm8_r8                  = 0x28
SUB_rm1632_r1632            = 0x29
SUB_r8_rm8                  = 0x2A
SUB_r1632_rm1632            = 0x2B
SUB_al_imm8                 = 0x2C
SUB_eax_imm1632             = 0x2D
DAS                         = 0x2F
XOR_rm8_r8                  = 0x30
XOR_rm1632_r1632            = 0x31
XOR_r8_rm8                  = 0x32
XOR_r1632_rm1632            = 0x33
XOR_al_imm8                 = 0x34
XOR_eax_imm1632             = 0x35
AAA                         = 0x37
CMP_rm8_r8                  = 0x38
CMP_rm1632_r1632            = 0x39
CMP_r8_rm8                  = 0x3A
CMP_r1632_rm1632            = 0x3B
CMP_al_imm8                 = 0x3C
CMP_eax_imm1632             = 0x3D
AAS                         = 0x3F
INC_r1632                   = 0x40
DEC_r1632                   = 0x48
PUSH_r1632                  = 0x50
POP_r1632                   = 0x58
PUSHA                       = 0x60
POPA                        = 0x61
BOUND_r1632_m1632           = 0x62
ARPL_rm16_r16               = 0x63
PUSH_imm1632                = 0x68
IMUL_r1632_rm1632_imm1632   = 0x69
PUSH_imm8                   = 0x6A
IMUL_r1632_rm1632_imm8      = 0x6B
INSB                        = 0x6C
INS_WD                      = 0x6D
OUTSB                       = 0x6E
OUTS_WD                     = 0x6F
JO_rel8                     = 0x70
JNO_rel8                    = 0x71
JB_rel8                     = 0x72
JNB_rel8                    = 0x73
JZ_rel8                     = 0x74
JNZ_rel8                    = 0x75
JBE_rel8                    = 0x76
JNBE_rel8                   = 0x77
JS_rel8                     = 0x78
JNS_rel8                    = 0x79
JP_rel8                     = 0x7A
JNP_rel8                    = 0x7B
JL_rel8                     = 0x7C
JNL_rel8                    = 0x7D
JLE_rel8                    = 0x7E
JNLE_rel8                   = 0x7F
ADD_rm8_imm8                = 0x80 #1
OR_rm8_imm8                 = 0x80 #2
ADC_rm8_imm8                = 0x80 #3
SBB_rm8_imm8                = 0x80 #4
AND_rm8_imm8                = 0x80 #5
SUB_rm8_imm8                = 0x80 #6
XOR_rm8_imm8                = 0x80 #7
ADD_rm1632_imm1632          = 0x81 #1
OR_rm1632_imm1632           = 0x81 #2
ADC_rm1632_imm1632          = 0x81 #3
SBB_rm1632_imm1632          = 0x81 #4
AND_rm1632_imm1632          = 0x81 #5
SUB_rm1632_imm1632          = 0x81 #6
XOR_rm1632_imm1632          = 0x81 #7
ADD_rm8_imm8                = 0x82 #1   Same as 0x80
OR_rm8_imm8                 = 0x82 #2
ADC_rm8_imm8                = 0x82 #3
SBB_rm8_imm8                = 0x82 #4
AND_rm8_imm8                = 0x82 #5
SUB_rm8_imm8                = 0x82 #6
XOR_rm8_imm8                = 0x82 #7
ADD_rm1632_imm8             = 0x83 #1
OR_rm1632_imm8              = 0x83 #2
ADC_rm1632_imm8             = 0x83 #3
SBB_rm1632_imm8             = 0x83 #4
AND_rm1632_imm8             = 0x83 #5
SUB_rm1632_imm8             = 0x83 #6
XOR_rm1632_imm8             = 0x83 #7
TEST_rm8_r8                 = 0x84
TEST_rm1632_r1632           = 0x85
XCHG_r8_rm8                 = 0x86
XCHG_r1632_rm1632           = 0x87
MOV_rm8_r8                  = 0x88
MOV_rm1632_r1632            = 0x89
MOV_r8_rm8                  = 0x8A
MOV_r1632_rm1632            = 0x8B
MOV_m16r1632_sreg           = 0x8C
LEA_r1632_m                 = 0x8D
MOV_sreg_rm16               = 0x8E
POP_rm1632                  = 0x8F
NOP                         = 0x90
XCHG_r1632_eax              = 0x90
PAUSE                       = 0x90 #pfx 0xF3
CBW                         = 0x98 #pfx 0x66
CWDE                        = 0x98
CWD                         = 0x99 #pfx 0x66
CDQ                         = 0x99
CALLF_ptr1632               = 0x9A ##############
FWAIT                       = 0x9B
PUSHF                       = 0x9C
POPF                        = 0x9D
SAHF                        = 0x9E
LAHF                        = 0x9F
MOV_al_moffs8               = 0xA0
MOV_eax_moffs1632           = 0xA1
MOV_moffs8_al               = 0xA2
MOV_moffs1632_eax           = 0xA3
MOVSB                       = 0xA4
MOVSW                       = 0xA5 #pfx 0x66
MOVSD                       = 0xA5
CMPSB                       = 0xA6
CMPSW                       = 0xA7 #pfx 0x66
CMPSD                       = 0xA7
TEST_al_imm8                = 0xA8
TEST_eax_imm1632            = 0xA9
STOSB                       = 0xAA
STOSW                       = 0xAB #pfx 0x66
STOSD                       = 0xAB
LODSB                       = 0xAC
LODSW                       = 0xAD #pfx 0x66
LODSD                       = 0xAD
SCASB                       = 0xAE
SCASW                       = 0xAF #pfx 0x66
SCASD                       = 0xAF
MOV_r8_imm8                 = 0xB0
MOV_r1632_imm1632           = 0xB8
ROL_rm8_imm8                = 0xC0
ROR_rm8_imm8                = 0xC0
RCL_rm8_imm8                = 0xC0
RCR_rm8_imm8                = 0xC0
SHL_rm8_imm8                = 0xC0
SHR_rm8_imm8                = 0xC0
SAL_rm8_imm8                = 0xC0
SAR_rm8_imm8                = 0xC0
ROL_rm1632_imm8             = 0xC1
ROR_rm1632_imm8             = 0xC1
RCL_rm1632_imm8             = 0xC1
RCR_rm1632_imm8             = 0xC1
SHL_rm1632_imm8             = 0xC1
SHR_rm1632_imm8             = 0xC1
SAL_rm1632_imm8             = 0xC1
SAR_rm1632_imm8             = 0xC1
RET                         = 0xC2
RET_imm16                   = 0xC3
LES_r1632_m1632             = 0xC4
LDS_r1632_m1632             = 0xC5
MOV_rm8_imm8                = 0xC6
MOV_rm1632_imm1632          = 0xC7
ENTER_imm16_imm8            = 0xC8
LEAVE                       = 0xC9
RETF_imm16                  = 0xCA
RETF                        = 0xCB
INT3                        = 0xCC
INT_imm16                   = 0xCD
INTO                        = 0xCE
IRET                        = 0xCF
ROL_rm8_1                   = 0xD0
ROR_rm8_1                   = 0xD0
RCL_rm8_1                   = 0xD0
RCR_rm8_1                   = 0xD0
SHL_rm8_1                   = 0xD0
SHR_rm8_1                   = 0xD0
SAL_rm8_1                   = 0xD0
SAR_rm8_1                   = 0xD0
ROL_rm1632_1                = 0xD1
ROR_rm1632_1                = 0xD1
RCL_rm1632_1                = 0xD1
RCR_rm1632_1                = 0xD1
SHL_rm1632_1                = 0xD1
SHR_rm1632_1                = 0xD1
SAL_rm1632_1                = 0xD1
SAR_rm1632_1                = 0xD1
ROL_rm8_cl                  = 0xD2
ROR_rm8_cl                  = 0xD2
RCL_rm8_cl                  = 0xD2
RCR_rm8_cl                  = 0xD2
SHL_rm8_cl                  = 0xD2
SHR_rm8_cl                  = 0xD2
SAL_rm8_cl                  = 0xD2
SAR_rm8_cl                  = 0xD2
ROL_rm1632_cl               = 0xD3
ROR_rm1632_cl               = 0xD3
RCL_rm1632_cl               = 0xD3
RCR_rm1632_cl               = 0xD3
SHL_rm1632_cl               = 0xD3
SHR_rm1632_cl               = 0xD3
SAL_rm1632_cl               = 0xD3
SAR_rm1632_cl               = 0xD3
AAM_imm8                    = 0xD4
AAD_imm8                    = 0xD5
SALC                        = 0xD6
XLATB                       = 0xD7
FADD_m32real_sti            = 0xD8
FMUL                        = 0xD8
FCOM_st_stim32real          = 0xD8
FCOMP_st_stim32real         = 0xD8
FCOMP_st_st1                = 0xD8
FSUB_m32realsti             = 0xD8
FSUBR_m32realsti            = 0xD8
FDIV_m32realsti             = 0xD8
FDIVR_m32realsti            = 0xD8
FLD_stim32real              = 0xD9
FXCH_sti                    = 0xD9
FST_m32real                 = 0xD9
FNOP                        = 0xD9
FSTP_m32real                = 0xD9
FLDENV_m1418                = 0xD9
FACHS                       = 0xD9
FABS                        = 0xD9
FTST                        = 0xD9
FXAM                        = 0xD9
FLDCW_m16                   = 0xD9
FLD1                        = 0xD9
FLDL2T                      = 0xD9
FLDL2E                      = 0xD9
FLDPI                       = 0xD9
FLDLG2                      = 0xD9
FLDLN2                      = 0xD9
FLDZ                        = 0xD9
FSTENV_m1428                = 0xD9 #pfx 0x9B
FNSTENV_m1428               = 0xD9
F2XM1                       = 0xD9
FYL2X                       = 0xD9
FPTAN                       = 0xD9
FPATAN                      = 0xD9
FXTRACT                     = 0xD9
FPREM1                      = 0xD9
FDECSTP                     = 0xD9
FINCSTP                     = 0xD9
FNSTCW_m16                  = 0xD9
FSTCW_m16                   = 0xD9 #pfx 0x9B
FPREM                       = 0xD9
FYL2XP1                     = 0xD9
FSQRT                       = 0xD9
FSINCOS                     = 0xD9
FRNDINT                     = 0xD9
FSCALE                      = 0xD9
FSIN                        = 0xD9
FCOS                        = 0xD9

"""
#registers

EAX = AX = AL = ST0 = 0
ECX = CX = CL = ST1 = 1
EDX = DX = DL = ST2 = 2
EBX = BX = BL = ST3 = 3
ESP = SP = AH = ST4 = 4
EBP = BP = CH = ST5 = 5
ESI = SI = DH = ST6 = 6
EDI = DI = BH = ST7 = 7
"""

def main():
    print(len(globals()))

if __name__ == "__main__":
    main()
